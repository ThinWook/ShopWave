using Microsoft.EntityFrameworkCore;

namespace ShopWave.Models
{
    public class ShopWaveDbContext : DbContext
    {
        public ShopWaveDbContext(DbContextOptions<ShopWaveDbContext> options) : base(options)
        {
        }

        public DbSet<User> Users { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<Review> Reviews { get; set; }
        public DbSet<CartItem> CartItems { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderItem> OrderItems { get; set; }
        public DbSet<WishlistItem> WishlistItems { get; set; }
        public DbSet<ProductRecommendation> ProductRecommendations { get; set; }
        public DbSet<BrowsingHistory> BrowsingHistory { get; set; }
        public DbSet<Notification> Notifications { get; set; }
        public DbSet<UserSetting> UserSettings { get; set; }
        public DbSet<UserSession> UserSessions { get; set; }
        public DbSet<Media> Media { get; set; }
        public DbSet<ProductMedia> ProductMedia { get; set; }
        public DbSet<UserMedia> UserMedia { get; set; }
        public DbSet<ProductVariant> ProductVariants { get; set; }
        public DbSet<ProductVariantAttribute> ProductVariantAttributes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer();
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Product>()
                .Property(p => p.Price)
                .HasColumnType("decimal(18,2)");

            modelBuilder.Entity<CartItem>()
                .Property(ci => ci.UnitPrice)
                .HasColumnType("decimal(18,2)");

            modelBuilder.Entity<Order>()
                .Property(o => o.TotalAmount)
                .HasColumnType("decimal(18,2)");

            modelBuilder.Entity<OrderItem>()
                .Property(oi => oi.UnitPrice)
                .HasColumnType("decimal(18,2)");

            modelBuilder.Entity<OrderItem>()
                .Property(oi => oi.TotalPrice)
                .HasColumnType("decimal(18,2)");

            modelBuilder.Entity<User>()
                .HasIndex(u => u.Email)
                .IsUnique();

            modelBuilder.Entity<Category>()
                .HasOne(c => c.ParentCategory)
                .WithMany(c => c.SubCategories)
                .HasForeignKey(c => c.ParentId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Product>()
                .HasOne(p => p.Category)
                .WithMany(c => c.Products)
                .HasForeignKey(p => p.CategoryId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Review>()
                .HasOne(r => r.Product)
                .WithMany(p => p.Reviews)
                .HasForeignKey(r => r.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Review>()
                .HasOne(r => r.User)
                .WithMany(u => u.Reviews)
                .HasForeignKey(r => r.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<CartItem>()
                .HasOne(ci => ci.User)
                .WithMany(u => u.CartItems)
                .HasForeignKey(ci => ci.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<CartItem>()
                .HasOne(ci => ci.Product)
                .WithMany(p => p.CartItems)
                .HasForeignKey(ci => ci.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Order>()
                .HasOne(o => o.User)
                .WithMany(u => u.Orders)
                .HasForeignKey(o => o.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<OrderItem>()
                .HasOne(oi => oi.Order)
                .WithMany(o => o.OrderItems)
                .HasForeignKey(oi => oi.OrderId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<OrderItem>()
                .HasOne(oi => oi.Product)
                .WithMany(p => p.OrderItems)
                .HasForeignKey(oi => oi.ProductId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<WishlistItem>()
                .HasOne(wi => wi.User)
                .WithMany(u => u.WishlistItems)
                .HasForeignKey(wi => wi.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<WishlistItem>()
                .HasOne(wi => wi.Product)
                .WithMany(p => p.WishlistItems)
                .HasForeignKey(wi => wi.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ProductRecommendation>()
                .HasOne(pr => pr.User)
                .WithMany(u => u.ProductRecommendations)
                .HasForeignKey(pr => pr.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ProductRecommendation>()
                .HasOne(pr => pr.Product)
                .WithMany(p => p.ProductRecommendations)
                .HasForeignKey(pr => pr.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<BrowsingHistory>()
                .HasOne(bh => bh.User)
                .WithMany(u => u.BrowsingHistory)
                .HasForeignKey(bh => bh.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<BrowsingHistory>()
                .HasOne(bh => bh.Product)
                .WithMany(p => p.BrowsingHistory)
                .HasForeignKey(bh => bh.ProductId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Notification>()
                .HasOne(n => n.User)
                .WithMany(u => u.Notifications)
                .HasForeignKey(n => n.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<UserSetting>()
                .HasOne(us => us.User)
                .WithMany(u => u.UserSettings)
                .HasForeignKey(us => us.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<UserSession>()
                .HasOne(us => us.User)
                .WithMany(u => u.UserSessions)
                .HasForeignKey(us => us.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<CartItem>()
                .HasIndex(ci => new { ci.UserId, ci.ProductId })
                .IsUnique();

            modelBuilder.Entity<WishlistItem>()
                .HasIndex(wi => new { wi.UserId, wi.ProductId })
                .IsUnique();

            modelBuilder.Entity<UserSetting>()
                .HasIndex(us => new { us.UserId, us.SettingKey })
                .IsUnique();

            modelBuilder.Entity<Review>()
                .HasIndex(r => new { r.ProductId, r.UserId })
                .IsUnique();

            // Media table configuration
            modelBuilder.Entity<Media>()
                .Property(m => m.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Media>()
                .Property(m => m.CreatedAt)
                .HasDefaultValueSql("GETUTCDATE()");
            modelBuilder.Entity<Media>()
                .Property(m => m.Url)
                .IsRequired();

            // ProductMedia
            modelBuilder.Entity<ProductMedia>()
                .HasKey(pm => new { pm.ProductId, pm.MediaId });
            modelBuilder.Entity<ProductMedia>()
                .Property(pm => pm.DisplayOrder)
                .HasDefaultValue(0);
            modelBuilder.Entity<ProductMedia>()
                .HasOne(pm => pm.Product)
                .WithMany(p => p.ProductMedia)
                .HasForeignKey(pm => pm.ProductId)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<ProductMedia>()
                .HasOne(pm => pm.Media)
                .WithMany()
                .HasForeignKey(pm => pm.MediaId)
                .OnDelete(DeleteBehavior.Cascade);

            // UserMedia
            modelBuilder.Entity<UserMedia>()
                .HasKey(um => new { um.UserId, um.MediaId, um.MediaType });
            modelBuilder.Entity<UserMedia>()
                .Property(um => um.MediaType)
                .HasMaxLength(50)
                .IsRequired()
                .HasColumnType("varchar(50)");
            modelBuilder.Entity<UserMedia>()
                .HasOne(um => um.User)
                .WithMany(u => u.UserMedia)
                .HasForeignKey(um => um.UserId)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<UserMedia>()
                .HasOne(um => um.Media)
                .WithMany()
                .HasForeignKey(um => um.MediaId)
                .OnDelete(DeleteBehavior.Cascade);

            // ProductVariant
            modelBuilder.Entity<ProductVariant>()
                .HasOne(v => v.Product)
                .WithMany()
                .HasForeignKey(v => v.ProductId)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<ProductVariant>()
                .HasOne(v => v.Image)
                .WithMany()
                .HasForeignKey(v => v.ImageId)
                .OnDelete(DeleteBehavior.SetNull);
            modelBuilder.Entity<ProductVariant>()
                .HasIndex(v => v.Sku)
                .IsUnique();

            // ProductVariantAttribute
            modelBuilder.Entity<ProductVariantAttribute>()
                .HasOne(a => a.ProductVariant)
                .WithMany(v => v.Attributes)
                .HasForeignKey(a => a.ProductVariantId)
                .OnDelete(DeleteBehavior.Cascade);
        }
    }
}