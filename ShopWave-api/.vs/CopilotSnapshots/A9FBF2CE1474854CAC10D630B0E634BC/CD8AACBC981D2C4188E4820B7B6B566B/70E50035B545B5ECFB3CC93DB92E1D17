using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ShopWave.Models;
using ShopWave.Models.DTOs;
using ShopWave.Models.Responses;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;

namespace ShopWave.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class OrdersController : ControllerBase
    {
        private readonly ShopWaveDbContext _context;
        private readonly ILogger<OrdersController> _logger;

        public OrdersController(ShopWaveDbContext context, ILogger<OrdersController> logger)
        {
            _context = context;
            _logger = logger;
        }

        [HttpPost]
        public async Task<ActionResult<ApiResponse<OrderResponse>>> CreateOrder([FromBody] CreateOrderRequest request, [FromHeader(Name = "Authorization")] string? token)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            int? userId = null;
            try
            {
                userId = await GetUserIdFromToken(token);
                if (userId == null)
                {
                    return Unauthorized(ApiResponse<OrderResponse>.ErrorResult("Vui lòng đăng nhập"));
                }

                if (!ModelState.IsValid)
                {
                    return BadRequest(ApiResponse<OrderResponse>.ErrorResult("Dữ liệu không hợp lệ"));
                }

                // Get cart items
                var cartItems = await _context.CartItems
                    .Include(ci => ci.Product)
                    .Where(ci => ci.UserId == userId.Value)
                    .ToListAsync();

                if (!cartItems.Any())
                {
                    return BadRequest(ApiResponse<OrderResponse>.ErrorResult("Giỏ hàng trống"));
                }

                // Check stock availability
                foreach (var cartItem in cartItems)
                {
                    if (cartItem.Product.StockQuantity < cartItem.Quantity)
                    {
                        return BadRequest(ApiResponse<OrderResponse>.ErrorResult($"Sản phẩm '{cartItem.Product.Name}' không đủ số lượng trong kho"));
                    }
                }

                // Calculate total
                var subTotal = cartItems.Sum(ci => ci.Quantity * ci.UnitPrice);
                var shippingFee = CalculateShippingFee(subTotal);
                var totalAmount = subTotal + shippingFee;

                // Generate order number
                var orderNumber = await GenerateOrderNumber();

                // Create order
                var order = new Order
                {
                    UserId = userId.Value,
                    OrderNumber = orderNumber,
                    TotalAmount = totalAmount,
                    Status = "Pending",
                    ShippingAddress = JsonSerializer.Serialize(request.ShippingAddress),
                    BillingAddress = request.BillingAddress != null ? JsonSerializer.Serialize(request.BillingAddress) : null,
                    PaymentMethod = request.PaymentMethod,
                    PaymentStatus = "Pending",
                    OrderDate = DateTime.UtcNow,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                _context.Orders.Add(order);
                await _context.SaveChangesAsync();

                // Create order items and update stock
                var orderItems = new List<OrderItem>();
                foreach (var cartItem in cartItems)
                {
                    var orderItem = new OrderItem
                    {
                        OrderId = order.Id,
                        ProductId = cartItem.ProductId,
                        ProductName = cartItem.Picture,
                        Quantity = cartItem.Quantity,
                        UnitPrice = cartItem.Price,
                        TotalPrice = cartItem.Quantity * cartItem.UnitPrice,
                        CreatedAt = DateTime.UtcNow
                    };

                    orderItems.Add(orderItem);

                    // Update stock
                    cartItem.Product.StockQuantity -= cartItem.Quantity;
                }

                _context.OrderItems.AddRange(orderItems);
                
                // Clear cart
                _context.CartItems.RemoveRange(cartItems);

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                var response = new OrderResponse
                {
                    OrderId = order.Id,
                    OrderNumber = order.OrderNumber,
                    TotalAmount = order.TotalAmount,
                    Status = order.Status,
                    OrderDate = order.OrderDate,
                    OrderItems = orderItems.Select(oi => new OrderItemDto
                    {
                        Id = oi.Id,
                        ProductName = oi.ProductName,
                        Quantity = oi.Quantity,
                        UnitPrice = oi.UnitPrice,
                        TotalPrice = oi.TotalPrice
                    }).ToList()
                };

                return Ok(ApiResponse<OrderResponse>.SuccessResult(response, "Tạo đơn hàng thành công"));
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "Lỗi khi tạo đơn hàng cho người dùng {UserId}", userId);
                return StatusCode(500, ApiResponse<OrderResponse>.ErrorResult("Có lỗi xảy ra khi tạo đơn hàng"));
            }
        }

        [HttpGet]
        public async Task<ActionResult<PagedResponse<OrderDto>>> GetMyOrders(
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 10,
            [FromQuery] string? status = null,
            [FromHeader(Name = "Authorization")] string? token = null)
        {
            int? userId = null;
            try
            {
                userId = await GetUserIdFromToken(token);
                if (userId == null)
                {
                    return Unauthorized(ApiResponse<object>.ErrorResult("Vui lòng đăng nhập"));
                }

                var query = _context.Orders
                    .Where(o => o.UserId == userId.Value);

                if (!string.IsNullOrEmpty(status))
                {
                    query = query.Where(o => o.Status == status);
                }

                var totalRecords = await query.CountAsync();
                var totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);

                var orders = await query
                    .OrderByDescending(o => o.CreatedAt)
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .Select(o => new OrderDto
                    {
                        Id = o.Id,
                        OrderNumber = o.OrderNumber,
                        TotalAmount = o.TotalAmount,
                        Status = o.Status,
                        PaymentStatus = o.PaymentStatus,
                        OrderDate = o.OrderDate,
                        ShippedDate = o.ShippedDate,
                        DeliveredDate = o.DeliveredDate,
                        OrderItems = o.OrderItems.Select(oi => new OrderItemDto
                        {
                            Id = oi.Id,
                            ProductName = oi.ProductName,
                            Quantity = oi.Quantity,
                            UnitPrice = oi.UnitPrice,
                            TotalPrice = oi.TotalPrice
                        }).ToList()
                    })
                    .ToListAsync();

                var response = new PagedResponse<OrderDto>
                {
                    Data = orders,
                    CurrentPage = page,
                    TotalPages = totalPages,
                    PageSize = pageSize,
                    TotalRecords = totalRecords
                };

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Lỗi khi lấy danh sách đơn hàng của người dùng {UserId}", userId);
                return StatusCode(500, ApiResponse<object>.ErrorResult("Có lỗi xảy ra khi lấy danh sách đơn hàng"));
            }
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<ApiResponse<OrderDetailDto>>> GetOrderById(int id, [FromHeader(Name = "Authorization")] string? token)
        {
            try
            {
                var userId = await GetUserIdFromToken(token);
                if (userId == null)
                {
                    return Unauthorized(ApiResponse<OrderDetailDto>.ErrorResult("Vui lòng đăng nhập"));
                }

                var user = await _context.Users.FindAsync(userId.Value);
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .FirstOrDefaultAsync(o => o.Id == id);

                if (order == null)
                {
                    return NotFound(ApiResponse<OrderDetailDto>.ErrorResult("Không tìm thấy đơn hàng"));
                }

                // User can only view their own orders, admin can view any order
                if (order.UserId != userId.Value && user?.Role != "Admin")
                {
                    return Forbid();
                }

                var orderDetail = new OrderDetailDto
                {
                    Id = order.Id,
                    OrderNumber = order.OrderNumber,
                    TotalAmount = order.TotalAmount,
                    Status = order.Status,
                    PaymentMethod = order.PaymentMethod,
                    PaymentStatus = order.PaymentStatus,
                    OrderDate = order.OrderDate,
                    ShippedDate = order.ShippedDate,
                    DeliveredDate = order.DeliveredDate,
                    ShippingAddress = order.ShippingAddress,
                    BillingAddress = order.BillingAddress,
                    OrderItems = order.OrderItems.Select(oi => new OrderItemDto
                    {
                        Id = oi.Id,
                        ProductName = oi.ProductName,
                        Quantity = oi.Quantity,
                        UnitPrice = oi.UnitPrice,
                        TotalPrice = oi.TotalPrice
                    }).ToList()
                };

                return Ok(ApiResponse<OrderDetailDto>.SuccessResult(orderDetail, "Lấy chi tiết đơn hàng thành công"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Lỗi khi lấy chi tiết đơn hàng {OrderId}", id);
                return StatusCode(500, ApiResponse<OrderDetailDto>.ErrorResult("Có lỗi xảy ra khi lấy chi tiết đơn hàng"));
            }
        }

        [HttpPut("{id}/cancel")]
        public async Task<ActionResult<ApiResponse<object>>> CancelOrder(int id, [FromHeader(Name = "Authorization")] string? token)
        {
            try
            {
                var userId = await GetUserIdFromToken(token);
                if (userId == null)
                {
                    return Unauthorized(ApiResponse<object>.ErrorResult("Vui lòng đăng nhập"));
                }

                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.Product)
                    .FirstOrDefaultAsync(o => o.Id == id && o.UserId == userId.Value);

                if (order == null)
                {
                    return NotFound(ApiResponse<object>.ErrorResult("Không tìm thấy đơn hàng"));
                }

                if (order.Status != "Pending" && order.Status != "Processing")
                {
                    return BadRequest(ApiResponse<object>.ErrorResult("Không thể hủy đơn hàng ở trạng thái hiện tại"));
                }

                // Restore stock
                foreach (var orderItem in order.OrderItems)
                {
                    orderItem.Product.StockQuantity += orderItem.Quantity;
                }

                order.Status = "Cancelled";
                order.UpdatedAt = DateTime.UtcNow;

                await _context.SaveChangesAsync();

                return Ok(ApiResponse<object>.SuccessResult(null, "Hủy đơn hàng thành công"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Lỗi khi hủy đơn hàng {OrderId}", id);
                return StatusCode(500, ApiResponse<object>.ErrorResult("Có lỗi xảy ra khi hủy đơn hàng"));
            }
        }

        private async Task<int?> GetUserIdFromToken(string? token)
        {
            if (string.IsNullOrEmpty(token))
                return null;

            token = token.Replace("Bearer ", "");

            var session = await _context.UserSessions
                .FirstOrDefaultAsync(s => s.SessionToken == token && s.ExpiresAt > DateTime.UtcNow);

            return session?.UserId;
        }

        private decimal CalculateShippingFee(decimal subTotal)
        {
            // Free shipping for orders over 500,000 VND
            return subTotal >= 500000 ? 0 : 30000;
        }

        private async Task<string> GenerateOrderNumber()
        {
            var today = DateTime.UtcNow.ToString("yyyyMMdd");
            var lastOrder = await _context.Orders
                .Where(o => o.OrderNumber.StartsWith($"ORD{today}"))
                .OrderByDescending(o => o.OrderNumber)
                .FirstOrDefaultAsync();

            var sequence = 1;
            if (lastOrder != null)
            {
                var lastSequence = lastOrder.OrderNumber.Substring(11); // Remove "ORD" + date part
                if (int.TryParse(lastSequence, out var lastSeq))
                {
                    sequence = lastSeq + 1;
                }
            }

            return $"ORD{today}{sequence:D4}";
        }
    }

    public class CreateOrderRequest
    {
        [Required(ErrorMessage = "Địa chỉ giao hàng là bắt buộc")]
        public AddressDto ShippingAddress { get; set; } = null!;

        public AddressDto? BillingAddress { get; set; }

        [Required(ErrorMessage = "Phương thức thanh toán là bắt buộc")]
        [MaxLength(100)]
        public string PaymentMethod { get; set; } = string.Empty;

        public string? Notes { get; set; }
    }

    public class AddressDto
    {
        [Required] public string FullName { get; set; } = string.Empty;
        [Required] public string Phone { get; set; } = string.Empty;
        [Required] public string Address { get; set; } = string.Empty;
        [Required] public string Ward { get; set; } = string.Empty;
        [Required] public string District { get; set; } = string.Empty;
        [Required] public string City { get; set; } = string.Empty;
        public string? Notes { get; set; }
    }

    public class OrderDetailDto : OrderDto
    {
        public string? PaymentMethod { get; set; }
        public string? ShippingAddress { get; set; } // JSON string
        public string? BillingAddress { get; set; } // JSON string
    }
}