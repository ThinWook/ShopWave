using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ShopWave.Models;
using ShopWave.Models.DTOs;
using ShopWave.Models.Responses;

namespace ShopWave.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CategoriesController : ControllerBase
    {
        private readonly ShopWaveDbContext _context;
        private readonly ILogger<CategoriesController> _logger;

        public CategoriesController(ShopWaveDbContext context, ILogger<CategoriesController> logger)
        {
            _context = context;
            _logger = logger;
        }

        [HttpGet]
        public async Task<ActionResult<ApiResponse<List<CategoryDto>>>> GetCategories()
        {
            try
            {
                var categories = await _context.Categories
                    .Include(c => c.ParentCategory)
                    .Where(c => c.IsActive)
                    .OrderBy(c => c.SortOrder)
                    .ThenBy(c => c.Name)
                    .Select(c => new CategoryDto
                    {
                        Id = c.Id,
                        Name = c.Name,
                        Description = c.Description,
                        ImageUrl = c.ImageUrl,
                        ParentId = c.ParentId,
                        ParentName = c.ParentCategory != null ? c.ParentCategory.Name : null,
                        IsActive = c.IsActive,
                        ProductCount = c.Products.Count(p => p.IsActive)
                    })
                    .ToListAsync();

                return Ok(ApiResponse<List<CategoryDto>>.SuccessResult(categories, "L?y danh sách danh m?c thành công"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L?i khi l?y danh sách danh m?c");
                return StatusCode(500, ApiResponse<List<CategoryDto>>.ErrorResult("Có l?i x?y ra khi l?y danh sách danh m?c"));
            }
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<ApiResponse<CategoryDto>>> GetCategory(Guid id)
        {
            try
            {
                var category = await _context.Categories
                    .Include(c => c.ParentCategory)
                    .Where(c => c.Id == id && c.IsActive)
                    .Select(c => new CategoryDto
                    {
                        Id = c.Id,
                        Name = c.Name,
                        Description = c.Description,
                        ImageUrl = c.ImageUrl,
                        ParentId = c.ParentId,
                        ParentName = c.ParentCategory != null ? c.ParentCategory.Name : null,
                        IsActive = c.IsActive,
                        ProductCount = c.Products.Count(p => p.IsActive)
                    })
                    .FirstOrDefaultAsync();

                if (category == null)
                {
                    return NotFound(ApiResponse<CategoryDto>.ErrorResult("Không tìm th?y danh m?c"));
                }

                return Ok(ApiResponse<CategoryDto>.SuccessResult(category, "L?y thông tin danh m?c thành công"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L?i khi l?y thông tin danh m?c {CategoryId}", id);
                return StatusCode(500, ApiResponse<CategoryDto>.ErrorResult("Có l?i x?y ra khi l?y thông tin danh m?c"));
            }
        }

        [HttpGet("tree")]
        public async Task<ActionResult<ApiResponse<object>>> GetCategoryTree()
        {
            try
            {
                var categories = await _context.Categories
                    .Where(c => c.IsActive)
                    .OrderBy(c => c.SortOrder)
                    .ThenBy(c => c.Name)
                    .ToListAsync();

                var categoryTree = BuildCategoryTree(categories, null);

                return Ok(ApiResponse<object>.SuccessResult(categoryTree, "L?y cây danh m?c thành công"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L?i khi l?y cây danh m?c");
                return StatusCode(500, ApiResponse<object>.ErrorResult("Có l?i x?y ra khi l?y cây danh m?c"));
            }
        }

        [HttpGet("{id}/products")]
        public async Task<ActionResult<PagedResponse<ProductDto>>> GetCategoryProducts(Guid id, [FromQuery] int page = 1, [FromQuery] int pageSize = 12)
        {
            try
            {
                var category = await _context.Categories.FindAsync(id);
                if (category == null || !category.IsActive)
                {
                    return NotFound(ApiResponse<object>.ErrorResult("Không tìm th?y danh m?c"));
                }

                var query = _context.Products
                    .Include(p => p.Category)
                    .Where(p => p.CategoryId == id && p.IsActive)
                    .OrderByDescending(p => p.Popularity);

                var totalRecords = await query.CountAsync();
                var totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);

                var products = await query
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .Select(p => new ProductDto
                    {
                        Id = p.Id,
                        Name = p.Name,
                        Description = p.Description,
                        Price = p.Price,
                        CategoryName = p.Category.Name,
                        ImageUrl = p.ImageUrl,
                        Rating = p.Rating,
                        ReviewsCount = p.ReviewsCount,
                        StockQuantity = p.StockQuantity,
                        IsActive = p.IsActive
                    })
                    .ToListAsync();

                var response = new PagedResponse<ProductDto>
                {
                    Data = products,
                    CurrentPage = page,
                    TotalPages = totalPages,
                    PageSize = pageSize,
                    TotalRecords = totalRecords
                };

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "L?i khi l?y s?n ph?m trong danh m?c {CategoryId}", id);
                return StatusCode(500, ApiResponse<object>.ErrorResult("Có l?i x?y ra khi l?y s?n ph?m trong danh m?c"));
            }
        }

        private List<object> BuildCategoryTree(List<Category> categories, Guid? parentId)
        {
            return categories
                .Where(c => c.ParentId == parentId)
                .Select(c => new
                {
                    Id = c.Id,
                    Name = c.Name,
                    Description = c.Description,
                    ImageUrl = c.ImageUrl,
                    ProductCount = c.Products.Count(p => p.IsActive),
                    Children = BuildCategoryTree(categories, c.Id)
                })
                .Cast<object>()
                .ToList();
        }
    }
}