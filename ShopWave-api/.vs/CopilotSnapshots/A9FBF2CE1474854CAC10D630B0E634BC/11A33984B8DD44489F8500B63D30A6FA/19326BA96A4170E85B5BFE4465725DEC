using Microsoft.AspNetCore.Mvc;
using ShopWave.Services;
using ShopWave.Models.Responses;

namespace ShopWave.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class DatabaseController : ControllerBase
    {
        private readonly DatabaseTestService _databaseTestService;
        private readonly ILogger<DatabaseController> _logger;

        public DatabaseController(DatabaseTestService databaseTestService, ILogger<DatabaseController> logger)
        {
            _databaseTestService = databaseTestService;
            _logger = logger;
        }

        [HttpGet("test-connection")]
        public async Task<ActionResult<ApiResponse<object>>> TestConnection()
        {
            try
            {
                var isConnected = await _databaseTestService.TestConnectionAsync();
                
                if (isConnected)
                {
                    return Ok(ApiResponse<object>.SuccessResult(
                        new { connected = true }, 
                        "K?t n?i database thành công"));
                }
                else
                {
                    return StatusCode(500, ApiResponse<object>.ErrorResult("Không th? k?t n?i database"));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Database connection test failed");
                return StatusCode(500, ApiResponse<object>.ErrorResult($"L?i ki?m tra k?t n?i: {ex.Message}"));
            }
        }

        [HttpGet("info")]
        public async Task<ActionResult<ApiResponse<DatabaseInfo>>> GetDatabaseInfo()
        {
            try
            {
                var dbInfo = await _databaseTestService.GetDatabaseInfoAsync();
                return Ok(ApiResponse<DatabaseInfo>.SuccessResult(dbInfo, "L?y thông tin database thành công"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to get database info");
                return StatusCode(500, ApiResponse<DatabaseInfo>.ErrorResult($"L?i l?y thông tin database: {ex.Message}"));
            }
        }

        [HttpGet("tables")]
        public async Task<ActionResult<ApiResponse<List<string>>>> GetTables()
        {
            try
            {
                var tables = await _databaseTestService.GetTableNamesAsync();
                return Ok(ApiResponse<List<string>>.SuccessResult(tables, "L?y danh sách b?ng thành công"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to get table names");
                return StatusCode(500, ApiResponse<List<string>>.ErrorResult($"L?i l?y danh sách b?ng: {ex.Message}"));
            }
        }

        [HttpPost("ensure-created")]
        public async Task<ActionResult<ApiResponse<object>>> EnsureDatabaseCreated()
        {
            try
            {
                var success = await _databaseTestService.EnsureDatabaseCreatedAsync();
                
                if (success)
                {
                    return Ok(ApiResponse<object>.SuccessResult(null, "Database ?ã ???c t?o/ki?m tra thành công"));
                }
                else
                {
                    return StatusCode(500, ApiResponse<object>.ErrorResult("Không th? t?o database"));
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to ensure database created");
                return StatusCode(500, ApiResponse<object>.ErrorResult($"L?i t?o database: {ex.Message}"));
            }
        }
    }
}